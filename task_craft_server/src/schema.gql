# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Task {
  _id: String!
  title: String!
}

type User {
  """user uuid"""
  _id: String!

  """user first name. its not required and can be null"""
  firstName: String

  """user last name. its not required and can be null"""
  lastName: String

  """user profile picture (public). its not required and can be null"""
  profilePicture: String

  """user registered email"""
  email: String!
}

type DeviceUuId {
  """Secret token for current device"""
  deviceUuId: String!
}

type TokenEntity {
  """Secret token for current device"""
  accessToken: String!
}

type LoginWithGoogleEntity {
  """Secret token for current device"""
  accessToken: String!

  """user uuid"""
  userId: String!
}

type Query {
  health: String!
  task: [Task!]
  taskById(id: String!): Task

  """logout user. it will remove auth and invalidate jwt token"""
  logout: DeviceUuId!
  user(id: String!): User!
  userMe: User!
}

type Mutation {
  createTask(createTaskInput: CreateTaskInput!): Task!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  removeTask(id: String!): Task!

  """
  create device uuid. it will generate a unique device uuid, so that multiple device not be login at a same time with a single use
  """
  createDeviceUuid(createDeviceUuidInput: CreateDeviceUuidInput!): DeviceUuId!

  """
  request otp. it will send otp to user registered email. if user not exist with email, it will create new user
  """
  reqOtp(requestOtpInput: RequestOtpInput!): User!

  """
  verify otp. it will verify email and device, if not valid, it will throw error. then it will generate jwt token and refresh token. this endpoint also invalid existing longed in user
  """
  verifyOtp(verifyOtpInput: VerifyOtpInput!): TokenEntity!

  """
  verify otp. it will verify email and device, if not valid, it will throw error. then it will generate jwt token and refresh token. this endpoint also invalid existing longed in user
  """
  loginWithGoogle(loginWithGoogleInput: LoginWithGoogleInput!): LoginWithGoogleEntity!

  """
  refresh token. it remove old auth and generate new. and against that it will generate new jwt token
  """
  refreshToken(refreshTokenInput: RefreshTokenInput!): TokenEntity!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
}

input CreateTaskInput {
  title: String!
  description: String!
}

input UpdateTaskInput {
  title: String
  description: String
  id: String!
}

input CreateDeviceUuidInput {
  """User Device Type. Example: IOS, Android, Web"""
  deviceType: String!

  """User Device Type. Example: Mobile, Tablet, Desktop, Watch"""
  osName: String

  """Device Os Name. """
  osVersion: String

  """Device Os Version"""
  deviceModel: String

  """Physical or emulator"""
  isPhysicalDevice: Boolean

  """Client App Version"""
  appVersion: String

  """Uer Current Location. """
  location: LocationInput

  """User Ip Address"""
  ipAddress: String

  """User Fcm Token"""
  fcmToken: String!
}

input LocationInput {
  """Latitude"""
  lat: String!

  """Longitude"""
  long: String!
}

input RequestOtpInput {
  """User Valid Email. OTP will send there"""
  email: String!

  """this system generated device id"""
  deviceUuid: String!
}

input VerifyOtpInput {
  """User Valid Email. OTP will send there"""
  email: String

  """this system generated device id"""
  deviceUuid: String
  otp: Int!
}

input LoginWithGoogleInput {
  """User Valid Email. OTP will send there"""
  googleToken: String!

  """this system generated device id"""
  deviceUuid: String!
}

input RefreshTokenInput {
  """Device UuId"""
  deviceUuid: String!
}

input UpdateUserInput {
  """
  this is user email. its one time use only. cant be replaced. if user exist with this email, then it will not going to create new user. it will just use existing user info 
  """
  email: String

  """this is user first name"""
  firstName: String

  """this is user last name"""
  lastName: String

  """user uuid"""
  id: String!
}